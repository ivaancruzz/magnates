// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role{
  FREE
  VIP
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  phone         String?
  whatsapp      Boolean   @default(false)
  document      String?    
  address       String?
  acc_level     Role      @default(FREE)
  date_joined   DateTime  @default(now())
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  commerces      Commerce[]
}

model Section{
  id              Int       @id @default(autoincrement())
  title           String    
  commerce        CommerceOnSection[]
}

model Commerce{
  id                Int       @id @default(autoincrement())
  name              String
  image             String
  stars             Int       @default(0)
  sales             Int       @default(0)
  status            Boolean   @default(true)
  created_date      DateTime  @default(now())
  expiration_date   DateTime
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections          CommerceOnSection[]
  configuration     cConfiguration?
  address           cAddress[]
  emails            cEmail[]
  phones            cPhone[]
  products          cProduct[]
  orders            Order[]
  categories        cCategorie[]
}

model Order{
  id              String    @id @default(cuid())
  buyerId         String
  vendorId        Int
  productId       Int
  buyer           User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  vendor          Commerce  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  product         cProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  message         String
  created_date    DateTime  @default(now())
  payment_method  String
  order_status    String
  payment_status  Boolean
  coste_sending   Float     @default(0)
  amount          Float
}

model cConfiguration{
  id                  Int       @id @default(autoincrement())
  status_sales        Boolean   @default(true)
  status_stars        Boolean   @default(true)
  status_open         Boolean   @default(true)
  stock_notification  Boolean   @default(false)


  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
}

model cAddress{
  id              Int       @id @default(autoincrement())
  ubication       String
  latitude        String
  longitude       String

  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
}

model cEmail{
  id              Int       @id @default(autoincrement())
  email           String

  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
}

model cPhone{
  id              Int       @id @default(autoincrement())
  phone           String
  whatsapp        Boolean  @default(false)

  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
}

model cProduct{
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  price           Float
  price_off       Float?
  stock           Int
  sku             String?
  status          Boolean    @default(true)
  sales           Int        @default(0)
  views           Int     @default(0)
  categories      ProductOnCategorie[]
  images          pImage[]
  order           Order?

  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
}

model pImage{
  id              Int       @id @default(autoincrement())
  image           String

  product        cProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
}

model cCategorie{
  id              Int       @id @default(autoincrement())
  name            String
  status          Boolean   @default(true)
  commerceId      Int
  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  product         ProductOnCategorie?
}

model ProductOnCategorie{
  product         cProduct   @relation(fields: [productId], references: [id], onDelete: Cascade)
  categorie       cCategorie @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  productId       Int
  categorieId     Int

  @@id([productId, categorieId])
}

model CommerceOnSection{
  commerce        Commerce  @relation(fields: [commerceId], references: [id], onDelete: Cascade)
  commerceId      Int
  section         Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId       Int

  @@id([commerceId, sectionId])

}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}